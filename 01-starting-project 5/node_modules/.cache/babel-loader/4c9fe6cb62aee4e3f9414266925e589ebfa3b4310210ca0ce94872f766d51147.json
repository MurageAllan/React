{"ast":null,"code":"var _jsxFileName = \"/home/allan/Videos/01-starting-project 5/src/components/store/CartProvider.js\",\n  _s = $RefreshSig$();\nimport { useReducer } from \"react\";\nimport CartContext from \"./Cart-context\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0\n};\nconst cartReducer = (state, action) => {\n  if (action.type === \"ADD\") {\n    const updatedAmount = state.totalAmount + action.item.price * action.item.amount;\n\n    // check if an item exist using its index, if the item we are currently looking at has the same id as the item that was added\n    const existingCartItemIndex = state.items.findIndex(item => item.id === action.item.id);\n    // if the item is already part of the array it will be set to the below constant.\n    const existingCartItem = state.items[existingCartItemIndex];\n    let updatedItems;\n\n    // update the amount if the item exist\n    if (existingCartItem) {\n      const updatedItem = {\n        ...existingCartItem,\n        amount: existingCartItem.amount + action.item.amount\n      };\n      // so as to update this immutably without editing the old array\n      updatedItems = [...state.items];\n      // override the old item with the updated item\n      updatedItems[existingCartItemIndex] = updatedItem;\n    }\n    // if the item does not exist\n    else {\n      // update the current state item with the new item immutably.\n      updatedItems = state.items.concat(action.item);\n    }\n    return {\n      items: updatedItems,\n      totalAmount: updatedAmount\n    };\n  }\n  if (action.type === \"REMOVE\") {}\n  return defaultCartState;\n};\n// Manage cart context data and provide that context to all components that want access to it\nconst CartProvider = props => {\n  _s();\n  const [cartState, dispatchCartAction] = useReducer(cartReducer, defaultCartState);\n  const addItemHandler = item => {\n    dispatchCartAction({\n      type: \"ADD\",\n      item: item\n    });\n  };\n  const removeItemHandler = id => {\n    dispatchCartAction({\n      type: \"REMOVE\",\n      id: id\n    });\n  };\n  const cartData = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemHandler,\n    removeItem: removeItemHandler\n  };\n  return /*#__PURE__*/_jsxDEV(CartContext.Provider, {\n    value: cartData,\n    children: props.children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 66,\n    columnNumber: 5\n  }, this);\n};\n_s(CartProvider, \"PxEugEseoIJIbjFwtAJal5z5ClY=\");\n_c = CartProvider;\nexport default CartProvider;\nvar _c;\n$RefreshReg$(_c, \"CartProvider\");","map":{"version":3,"names":["useReducer","CartContext","defaultCartState","items","totalAmount","cartReducer","state","action","type","updatedAmount","item","price","amount","existingCartItemIndex","findIndex","id","existingCartItem","updatedItems","updatedItem","concat","CartProvider","props","cartState","dispatchCartAction","addItemHandler","removeItemHandler","cartData","addItem","removeItem","children"],"sources":["/home/allan/Videos/01-starting-project 5/src/components/store/CartProvider.js"],"sourcesContent":["import { useReducer } from \"react\";\nimport CartContext from \"./Cart-context\";\n\nconst defaultCartState = {\n  items: [],\n  totalAmount: 0,\n};\nconst cartReducer = (state, action) => {\n  if (action.type === \"ADD\") {\n    const updatedAmount =\n      state.totalAmount + action.item.price * action.item.amount;\n\n    // check if an item exist using its index, if the item we are currently looking at has the same id as the item that was added\n    const existingCartItemIndex = state.items.findIndex(\n      (item) => item.id === action.item.id\n    );\n    // if the item is already part of the array it will be set to the below constant.\n    const existingCartItem = state.items[existingCartItemIndex];\n\n    let updatedItems;\n\n    // update the amount if the item exist\n    if (existingCartItem) {\n      const updatedItem = {\n        ...existingCartItem,\n        amount: existingCartItem.amount + action.item.amount,\n      };\n      // so as to update this immutably without editing the old array\n      updatedItems = [...state.items];\n      // override the old item with the updated item\n      updatedItems[existingCartItemIndex] = updatedItem;\n    }\n    // if the item does not exist\n    else {\n      // update the current state item with the new item immutably.\n      updatedItems = state.items.concat(action.item);\n    }\n\n    return { items: updatedItems, totalAmount: updatedAmount };\n  }\n  if (action.type === \"REMOVE\") {\n  }\n  return defaultCartState;\n};\n// Manage cart context data and provide that context to all components that want access to it\nconst CartProvider = (props) => {\n  const [cartState, dispatchCartAction] = useReducer(\n    cartReducer,\n    defaultCartState\n  );\n\n  const addItemHandler = (item) => {\n    dispatchCartAction({ type: \"ADD\", item: item });\n  };\n  const removeItemHandler = (id) => {\n    dispatchCartAction({ type: \"REMOVE\", id: id });\n  };\n\n  const cartData = {\n    items: cartState.items,\n    totalAmount: cartState.totalAmount,\n    addItem: addItemHandler,\n    removeItem: removeItemHandler,\n  };\n  return (\n    <CartContext.Provider value={cartData}>\n      {props.children}\n    </CartContext.Provider>\n  );\n};\n\nexport default CartProvider;\n"],"mappings":";;AAAA,SAASA,UAAU,QAAQ,OAAO;AAClC,OAAOC,WAAW,MAAM,gBAAgB;AAAC;AAEzC,MAAMC,gBAAgB,GAAG;EACvBC,KAAK,EAAE,EAAE;EACTC,WAAW,EAAE;AACf,CAAC;AACD,MAAMC,WAAW,GAAG,CAACC,KAAK,EAAEC,MAAM,KAAK;EACrC,IAAIA,MAAM,CAACC,IAAI,KAAK,KAAK,EAAE;IACzB,MAAMC,aAAa,GACjBH,KAAK,CAACF,WAAW,GAAGG,MAAM,CAACG,IAAI,CAACC,KAAK,GAAGJ,MAAM,CAACG,IAAI,CAACE,MAAM;;IAE5D;IACA,MAAMC,qBAAqB,GAAGP,KAAK,CAACH,KAAK,CAACW,SAAS,CAChDJ,IAAI,IAAKA,IAAI,CAACK,EAAE,KAAKR,MAAM,CAACG,IAAI,CAACK,EAAE,CACrC;IACD;IACA,MAAMC,gBAAgB,GAAGV,KAAK,CAACH,KAAK,CAACU,qBAAqB,CAAC;IAE3D,IAAII,YAAY;;IAEhB;IACA,IAAID,gBAAgB,EAAE;MACpB,MAAME,WAAW,GAAG;QAClB,GAAGF,gBAAgB;QACnBJ,MAAM,EAAEI,gBAAgB,CAACJ,MAAM,GAAGL,MAAM,CAACG,IAAI,CAACE;MAChD,CAAC;MACD;MACAK,YAAY,GAAG,CAAC,GAAGX,KAAK,CAACH,KAAK,CAAC;MAC/B;MACAc,YAAY,CAACJ,qBAAqB,CAAC,GAAGK,WAAW;IACnD;IACA;IAAA,KACK;MACH;MACAD,YAAY,GAAGX,KAAK,CAACH,KAAK,CAACgB,MAAM,CAACZ,MAAM,CAACG,IAAI,CAAC;IAChD;IAEA,OAAO;MAAEP,KAAK,EAAEc,YAAY;MAAEb,WAAW,EAAEK;IAAc,CAAC;EAC5D;EACA,IAAIF,MAAM,CAACC,IAAI,KAAK,QAAQ,EAAE,CAC9B;EACA,OAAON,gBAAgB;AACzB,CAAC;AACD;AACA,MAAMkB,YAAY,GAAIC,KAAK,IAAK;EAAA;EAC9B,MAAM,CAACC,SAAS,EAAEC,kBAAkB,CAAC,GAAGvB,UAAU,CAChDK,WAAW,EACXH,gBAAgB,CACjB;EAED,MAAMsB,cAAc,GAAId,IAAI,IAAK;IAC/Ba,kBAAkB,CAAC;MAAEf,IAAI,EAAE,KAAK;MAAEE,IAAI,EAAEA;IAAK,CAAC,CAAC;EACjD,CAAC;EACD,MAAMe,iBAAiB,GAAIV,EAAE,IAAK;IAChCQ,kBAAkB,CAAC;MAAEf,IAAI,EAAE,QAAQ;MAAEO,EAAE,EAAEA;IAAG,CAAC,CAAC;EAChD,CAAC;EAED,MAAMW,QAAQ,GAAG;IACfvB,KAAK,EAAEmB,SAAS,CAACnB,KAAK;IACtBC,WAAW,EAAEkB,SAAS,CAAClB,WAAW;IAClCuB,OAAO,EAAEH,cAAc;IACvBI,UAAU,EAAEH;EACd,CAAC;EACD,oBACE,QAAC,WAAW,CAAC,QAAQ;IAAC,KAAK,EAAEC,QAAS;IAAA,UACnCL,KAAK,CAACQ;EAAQ;IAAA;IAAA;IAAA;EAAA,QACM;AAE3B,CAAC;AAAC,GAxBIT,YAAY;AAAA,KAAZA,YAAY;AA0BlB,eAAeA,YAAY;AAAC;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}